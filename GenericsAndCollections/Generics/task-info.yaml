type: edu
files:
- name: src/Task.java
  visible: true
  text: |-
    public class Task {
        public static void main(String[] args){
            Bag<Integer> numbers = new Bag<>();
            Bag<BingoChip> bingo = new Bag<>();
            try {
                numbers.add(1);
                numbers.add(2);
                numbers.add(2);
                numbers.add(1,0.5);
                numbers.add(2,0.8);
                System.out.println("Drawing 10 times, mostly twos");
                System.out.println(numbers.drawMany((10)));

                bingo.add(new BingoChip<String,Integer>("N",5));
                bingo.add(new BingoChip<String,Integer>("I",73));
                bingo.add(new BingoChip<String,String>("N","Center"));
                bingo.add(new BingoChip<String,Integer>("B",12));

                System.out.println("Draw a bingo chip");
                System.out.println(bingo.drawOne());
            }catch(BagException e){
                e.printStackTrace();
            }

        }

    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    import java.util.ArrayList;

    public class Tests {
      @Test
      public void testBagBasics() {
        Bag<Integer> b = new Bag<>();
        Assert.assertTrue("You have to initialize the array list in the constructor of Bag",b.objects!=null);
        try{
          b.add(5);
          Assert.assertEquals("You may not be adding correctly to a bag",(Integer)5,b.drawOne());
        }catch(BagException e){
          Assert.fail("You are not adding elements correctly and you do not seem to be managing your exceptions correctly");
        }
        try{
          b.add(null);
          Assert.fail("Null values are not allowed in thee add method of Bag");
        }catch(BagException e){

        }catch(Exception e){
          Assert.fail("you must throw a BagException, not any other exceptions when nulls are inserted in the Bag.");
        }

      }

      @Test
      public void testBagSpecifics(){
        try{
          Bag<String> b = new Bag<>();
          b.add("hello");
          b.add("hello");
          b.add("world");
          b.add("world");
          String e = b.drawOne();

          Assert.assertTrue("You may not be retrieving elements of Bag in drawOne",e.equals("hello")||e.equals("world"));
          b.add("hello",0.75);
          System.out.println(b.objects);
          Assert.assertEquals("Are you correctly inserting with probabilities?",7,b.objects.size(),1);
        } catch(BagException e){
          Assert.fail("You may not be throwing exceptions correctly in Bag");
        }

      }

      @Test
      public void testCorrectUseOfException(){
        try{
          Bag<String> b = new Bag<>();
          b.add("hello");
          ArrayList<String> l = b.drawMany(5);
          int h = 0;
          for(String s:l)
            if(s.equals("hello"))
              h++;
          Assert.assertTrue("Somehow your draw many may not be working properly.",(l.size()-h)<h);
          b.add("hello",1.2);
          Assert.fail("You are not throwing exceptions when probability is out of range.");
        }catch(BagException e){

        }catch(Exception e){
          Assert.fail("You are not throwing a BagException when appropriate. Perhaps you are throwin a different Exception?:"+e.getMessage());
        }
      }

      @Test
      public void testBingoChip(){
        BingoChip<String,Integer> b1 = new BingoChip<>("N",3);
        BingoChip<Integer,String> b2 = new BingoChip<>(3,"N");
        Assert.assertEquals("Your bingo chip toString may not be working properly or you are not initializing things correctly",b1.toString().length(),b1.toString().length());
      }

    }
  learner_created: false
- name: src/Bag.java
  visible: true
  placeholders:
  - offset: 103
    length: 42
    placeholder_text: "/* TODO \nInitialize the objects variable*/"
    initial_state:
      length: 42
      offset: 103
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: objects = new ArrayList<>();
  - offset: 156
    length: 171
    placeholder_text: "/* TODO \ncode the add method described. It should be public\
      \ and not \nreturn anything. Just take in a parameter and  throw an \nexception.\
      \ Read the documentation for this.*/"
    initial_state:
      length: 171
      offset: 156
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      public void add(T object) throws BagException{
              if(object==null)
                  throw new BagException("Nulls are not allowed");
              objects.add(object);
          }
  - offset: 330
    length: 140
    placeholder_text: "/* TODO \nCode the drawOne method here. It should not take\
      \ any\nparameters. It should return a generic object. More on the\ntask description.*/"
    initial_state:
      length: 140
      offset: 330
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
         public T drawOne(){
              int idx = (int)Math.round(Math.random()*(objects.size()-1));
              return objects.get(idx);
          }
  - offset: 483
    length: 17
    placeholder_text: /* return type?*/
    initial_state:
      length: 17
      offset: 483
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: ArrayList<T>
  - offset: 524
    length: 195
    placeholder_text: "/* TODO\nhowMany is the number of elements to draw. \nCreate\
      \ an ArrayList of the generic type and \"drawOne\" as\nmany times as you need,\
      \ putting the element drawn in the ArrayList.\nThen return it. */"
    initial_state:
      length: 195
      offset: 524
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
              ArrayList<T> result = new ArrayList<>(howMany);
              for(int i=0;i<howMany;i++)
                  result.add(this.drawOne());
              return result;
  - offset: 799
    length: 88
    placeholder_text: "/* TODO \nCheck that the probability is between 0 and 1. Otherwise\n\
      throw an exception. */"
    initial_state:
      length: 88
      offset: 799
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |
      if (prob>1 || prob<0)
                  throw new BagException("Probability has to be between 0 and 1");
  text: "import java.util.ArrayList;\n\npublic class Bag<T> {\n    ArrayList<T> objects;\n\
    \    public Bag(){\n        /* TODO \nInitialize the objects variable*/\n    }\n\
    \    /* TODO \ncode the add method described. It should be public and not \nreturn\
    \ anything. Just take in a parameter and  throw an \nexception. Read the documentation\
    \ for this.*/\n\n /* TODO \nCode the drawOne method here. It should not take any\n\
    parameters. It should return a generic object. More on the\ntask description.*/\n\
    \n    public /* return type?*/ drawMany(int howMany){\n/* TODO\nhowMany is the\
    \ number of elements to draw. \nCreate an ArrayList of the generic type and \"\
    drawOne\" as\nmany times as you need, putting the element drawn in the ArrayList.\n\
    Then return it. */\n    }\n\n    public void add(T element,double prob) throws\
    \ BagException{\n        /* TODO \nCheck that the probability is between 0 and\
    \ 1. Otherwise\nthrow an exception. */        // This is a way to add elements\
    \ in a given proportion.\n        int tot = (int)Math.round(objects.size()*prob);\n\
    \        for(int i=0;i<tot;i++){\n            System.out.println(\"Adding \"+i);\n\
    \            objects.add(element);\n        }\n    }\n}\n"
  learner_created: false
- name: src/BagException.java
  visible: true
  text: |
    public class BagException extends Exception{
        public BagException(String msg){
            super(msg);
        }
    }
  learner_created: false
- name: src/BingoChip.java
  visible: true
  placeholders:
  - offset: 22
    length: 91
    placeholder_text: "/* TODO \nImplement this class.\nUse the instructions and check\
      \ how it is used in Task.java*/"
    initial_state:
      length: 91
      offset: 22
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2
       <C,R>{
          private C column;
          private R row;

          public BingoChip(C col, R row){
              this.column = col;
              this.row = row;
          }

          public String toString(){
              return "Chip:"+column.toString()+"-"+row.toString();
          }
      }
  text: "public class BingoChip/* TODO \nImplement this class.\nUse the instructions\
    \ and check how it is used in Task.java*/\n\n"
  learner_created: false
status: Unchecked
record: -1

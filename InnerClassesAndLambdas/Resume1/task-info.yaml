type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 209
    length: 80
    placeholder_text: |-
      /* TODO */
      Create an education object. Schoo is NEIU, major is Computer Science.
    initial_state:
      length: 80
      offset: 209
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Resume.Education ed = r.new Education("NEIU", "Computer
      Science");
  - offset: 297
    length: 54
    placeholder_text: |-
      /* TODO */
      add this education object to the resume "r"
    initial_state:
      length: 54
      offset: 297
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: ' r.addEducation(ed);'
  - offset: 360
    length: 67
    placeholder_text: |-
      /* TODO */
      Create a new Experience object and add it to the resume.
    initial_state:
      length: 67
      offset: 360
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      Resume.Experience ex = new Resume.Experience("Barista", 2017,2018);
              r.addExperience(ex);
  - offset: 452
    length: 83
    placeholder_text: |-
      /* TODO */
      Create a new experience object on the fly, inside the addExperiece call.
    initial_state:
      length: 83
      offset: 452
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: new Resume.Experience("Cashier",2018,2019)
  - offset: 562
    length: 66
    placeholder_text: |-
      /* TODO */
      Add another experience object on the fly as you add it.
    initial_state:
      length: 66
      offset: 562
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: new Resume.Experience("Associate",2019,2021)
  text: |-
    public class Task {
        public static void main(String[] args){
            Person p = new Person("Kim Possible","2000-01-01");
            p.setPosition("Associate", 34000);
            Resume r = new Resume(p);
            /* TODO */
    Create an education object. Schoo is NEIU, major is Computer Science.
           /* TODO */
    add this education object to the resume "r"
            /* TODO */
    Create a new Experience object and add it to the resume.
            r.addExperience(/* TODO */
    Create a new experience object on the fly, inside the addExperiece call.);
            r.addExperience(/* TODO */
    Add another experience object on the fly as you add it.);
            System.out.println(r); //watch the resume print.

        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    import java.lang.reflect.Modifier;
    import java.time.LocalDate;
    import java.time.Period;

    public class Tests {
      @Test
      public void testPosition() {
        Person p1 = new Person("John Doe","2001-05-23");
        p1.setPosition("Associate",45000);
        String p = ""+p1.getPosition();
        Assert.assertTrue("Your position is not saving  the title as passed in setPosition.",p.contains("Associate"));
        Assert.assertTrue("Your position is not saving the salary as it should, or you overriding of the toString() method is not printing it.",p.contains("45000")||p.contains("45,000"));
        Class[] inners = Person.class.getDeclaredClasses();
        Assert.assertEquals("Is your inner class named Position","Person$Position",inners[0].getName());
        Assert.assertEquals("Is your inner class private?", Modifier.PRIVATE,inners[0].getModifiers());
      }

      @Test
      public void testPerson(){
        int age = -1*Period.between(LocalDate.now(),(LocalDate.parse("2001-05-23"))).getYears();
        Person p1 = new Person("John Doe","2001-05-23");
        p1.setPosition("Associate",45000);
        Assert.assertEquals("You may not be parsing the date correctly in the Person constructor.",age,p1.getAge());
        Assert.assertTrue("Is your toString() correct?",p1.toString().contains("John Doe") && p1.toString().contains(""+age)&& p1.toString().contains("Associate"));
      }

      @Test
      public void testInners(){
        Resume r = new Resume (new Person("Jane Doe","1992-05-23"));
        String classes = Resume.class.getDeclaredClasses()[0].getName()+Resume.class.getDeclaredClasses()[1].getName();
        int modifiers=0;
        for (Class c:Resume.class.getDeclaredClasses()) {
          System.out.println(c.getName()+":"+c.getModifiers());
          modifiers += c.getModifiers();
        }
        Assert.assertTrue("Do you have an Experience class?",classes.contains("Experience"));
        Assert.assertTrue("Do you have an Education class?",classes.contains("Education"));
        Assert.assertEquals("Do your classes have the right modifiers? (public, private, static)",10,modifiers);
        Resume.Experience ex = new Resume.Experience("CEO",2015,2021);
        Resume.Education ed = r.new Education("NEIU","Computer Sicence");
        Assert.assertTrue("Your Experience does not seem to set variables correctly.Check the specs.",ex.toString().contains("CEO") & ex.toYear==2021);
        Assert.assertTrue("Your Education object may not be initializing variables correctly. Check the specs.",ed.toString().contains("NEIU") & ed.school.equals("NEIU"));
      }

      @Test
      public void testResume(){
        Person p = new Person("Kim Possible","2000-01-01");
        p.setPosition("Associate", 34000);
        Resume r = new Resume(p);
        Resume.Education ed = r.new Education("NEIU", "Computer Science");
        r.addEducation(ed);
        Resume.Experience ex = new Resume.Experience("Barista", 2017,2018);
        r.addExperience(ex);
        r.addExperience(new Resume.Experience("Cashier",2018,2019));
        r.addExperience(new Resume.Experience("Associate",2019,2021));
        Assert.assertTrue("Your Resume does not seem to have a header with the word Education on its own line.",r.toString().contains("Education\n"));
        Assert.assertTrue("Your Resume does not seem to have a header with the word Experience on its own line.",r.toString().contains("Experience\n"));
        Assert.assertTrue("Your Resume may not be printing the person's details",r.toString().contains("Possible") && r.toString().contains("Associate"));
      }
    }
  learner_created: false
- name: src/Person.java
  visible: true
  placeholders:
  - offset: 0
    length: 66
    placeholder_text: |-
      /*TODO*/
      Create a Person class exactly as in Task 1. (Copy/Paste).
    initial_state:
      length: 66
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      import java.time.LocalDate;
      import java.time.Period;

      public class Person {
          private String name;
          private LocalDate birthDate;

          private class Position{
              String name;
              double salary;

              Position(String name,double salary){
                  this.name = name;
                  this.salary = salary;
              }

              public String toString(){
                  return name+":"+salary;
              }
          }

          private Position position;


          /**
           * Creates a Person with a name and a birthdate.
           */
          public Person(String name, String birthDate){
              this.name = name;
              this.birthDate = LocalDate.parse(birthDate);
          }

          public int getAge(){
              return -1*Period.between(LocalDate.now(),this.birthDate).getYears();
          }

          public void setPosition(String name, double salary){
              this.position = new Position(name,salary);
          }

          public Position getPosition(){
              return this.position;
          }

          public String toString(){
              return name+" - "+getAge()+":"+this.position;
          }
      }
  text: |
    /*TODO*/
    Create a Person class exactly as in Task 1. (Copy/Paste).
  learner_created: false
- name: src/Resume.java
  visible: true
  placeholders:
  - offset: 74
    length: 88
    placeholder_text: |-
      /* TODO */
      Create a public member inner class Education according to the specifications.
    initial_state:
      length: 88
      offset: 74
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
          public class Education{
              String school;
              String major;
              public String getSchool(){return school;}
              public String getMajor(){return major;}
              public Education(String school, String major){
                  this.school=school;
                  this.major=major;
              }
              public String toString(){
                  return major+" at "+school;
              }
          }
  - offset: 164
    length: 97
    placeholder_text: |-
      /* TODO */
      Create a public static inner class called Experience, according to the specifications.
    initial_state:
      length: 97
      offset: 164
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
          public static class Experience{
              int fromYear;
              int toYear;
              String title;
              public Experience(String title, int from, int to){
                  this.title = title;
                  this.fromYear = from;
                  this.toYear = to;
              }
              public String toString(){
                  return fromYear+" - "+toYear+":"+title;
              }
          }
  - offset: 263
    length: 106
    placeholder_text: |-
      /* TODO */
      Create the Person and List of Education and List of experience objects. They should be private.
    initial_state:
      length: 106
      offset: 263
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
          private Person p;
          private List<Education> ed;
          private List<Experience> ex;
  - offset: 399
    length: 124
    placeholder_text: |-
      /* TODO */
      This constructor should initialize the person and do all necessary initializations for the other methods to work.
    initial_state:
      length: 124
      offset: 399
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
              this.p = p;
              ed = new ArrayList<>();
              ex = new ArrayList<>();
  - offset: 531
    length: 97
    placeholder_text: |-
      /* TODO */
      Create the addEducation, addExperience and override the toString methods as specified.
    initial_state:
      length: 97
      offset: 531
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
          public void addEducation(Education e){
              ed.add(e);
          }

          public void addExperience(Experience e){
              ex.add(e);
          }

          public String toString(){
              String s = p.toString();
              s+="\nExperience";
              for(Experience e : ex)
                  s+="\n"+e;
              s+="\nEducation";
              for(Education e: ed)
                  s+="\n"+e;
              return s;
          }
  text: |
    import java.util.ArrayList;
    import java.util.List;

    public class Resume {
    /* TODO */
    Create a public member inner class Education according to the specifications.

    /* TODO */
    Create a public static inner class called Experience, according to the specifications.

    /* TODO */
    Create the Person and List of Education and List of experience objects. They should be private.
        public Resume(Person p){
    /* TODO */
    This constructor should initialize the person and do all necessary initializations for the other methods to work.
        }

    /* TODO */
    Create the addEducation, addExperience and override the toString methods as specified.



    }
  learner_created: false
status: Unchecked
record: -1

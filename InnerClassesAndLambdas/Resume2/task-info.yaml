type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 64
    length: 176
    placeholder_text: |-
      /* TODO */
      Copy the Task from task 2 here and add experiences where the end years are not in order. Watch it print the resume with the dates in order from most recent to least.
    initial_state:
      length: 176
      offset: 64
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
              Person p = new Person("Kim Possible","2000-01-01");
              p.setPosition("Associate", 34000);
              Resume r = new Resume(p);
              Resume.Education ed = r.new Education("NEIU", "Computer Science");
              r.addEducation(ed);
              Resume.Experience ex = new Resume.Experience("Barista", 2017,2018);
              r.addExperience(ex);
              r.addExperience(new Resume.Experience("Cashier",2016,2017));
              r.addExperience(new Resume.Experience("Associate",2019,2021));
              System.out.println(r);
  text: |-
    public class Task {
        public static void main(String[] args){
    /* TODO */
    Copy the Task from task 2 here and add experiences where the end years are not in order. Watch it print the resume with the dates in order from most recent to least.
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    import java.lang.reflect.Modifier;
    import java.time.LocalDate;
    import java.time.Period;

    public class Tests {
      @Test
      public void testPosition() {
        Person p1 = new Person("John Doe","2001-05-23");
        p1.setPosition("Associate",45000);
        String p = ""+p1.getPosition();
        Assert.assertTrue("Your position is not saving  the title as passed in setPosition.",p.contains("Associate"));
        Assert.assertTrue("Your position is not saving the salary as it should, or you overriding of the toString() method is not printing it.",p.contains("45000")||p.contains("45,000"));
        Class[] inners = Person.class.getDeclaredClasses();
        Assert.assertEquals("Is your inner class named Position","Person$Position",inners[0].getName());
        Assert.assertEquals("Is your inner class private?", Modifier.PRIVATE,inners[0].getModifiers());
      }

      @Test
      public void testPerson(){
        int age = -1*Period.between(LocalDate.now(),(LocalDate.parse("2001-05-23"))).getYears();
        Person p1 = new Person("John Doe","2001-05-23");
        p1.setPosition("Associate",45000);
        Assert.assertEquals("You may not be parsing the date correctly in the Person constructor.",age,p1.getAge());
        Assert.assertTrue("Is your toString() correct?",p1.toString().contains("John Doe") && p1.toString().contains(""+age)&& p1.toString().contains("Associate"));
      }

      @Test
      public void testInners(){
        Resume r = new Resume (new Person("Jane Doe","1992-05-23"));
        String classes = Resume.class.getDeclaredClasses()[0].getName()+Resume.class.getDeclaredClasses()[1].getName();
        int modifiers=0;
        for (Class c:Resume.class.getDeclaredClasses()) {
          System.out.println(c.getName()+":"+c.getModifiers());
          modifiers += c.getModifiers();
        }
        Assert.assertTrue("Do you have an Experience class?",classes.contains("Experience"));
        Assert.assertTrue("Do you have an Education class?",classes.contains("Education"));
        Assert.assertEquals("Do your classes have the right modifiers? (public, private, static)",10,modifiers);
        Resume.Experience ex = new Resume.Experience("CEO",2015,2021);
        Resume.Education ed = r.new Education("NEIU","Computer Sicence");
        Assert.assertTrue("Your Experience does not seem to set variables correctly.Check the specs.",ex.toString().contains("CEO") & ex.toYear==2021);
        Assert.assertTrue("Your Education object may not be initializing variables correctly. Check the specs.",ed.toString().contains("NEIU") & ed.school.equals("NEIU"));
      }

      @Test
      public void testResume() {
        Person p = new Person("Kim Possible", "2000-01-01");
        p.setPosition("Associate", 34000);
        Resume r = new Resume(p);
        Resume.Education ed = r.new Education("NEIU", "Computer Science");
        r.addEducation(ed);
        Resume.Experience ex = new Resume.Experience("Barista", 2017, 2018);
        r.addExperience(ex);
        r.addExperience(new Resume.Experience("Cashier", 2021, 2022));
        r.addExperience(new Resume.Experience("Associate", 2019, 2020));
        Assert.assertTrue("Are you sure the most recent (aka the largest value in the end year) is being polled from the queue? Check your comparator", r.getExperience().poll().toString().contains("2022"));
      }
    }
  learner_created: false
- name: src/Person.java
  visible: true
  placeholders:
  - offset: 0
    length: 62
    placeholder_text: |-
      /* TODO */
      Copy the Person class from Task 2 here. Copy->Paste
    initial_state:
      length: 62
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |
      import java.time.LocalDate;
      import java.time.Period;

      public class Person {
          private String name;
          private LocalDate birthDate;

          private class Position{
              String name;
              double salary;

              Position(String name,double salary){
                  this.name = name;
                  this.salary = salary;
              }

              public String toString(){
                  return name+":"+salary;
              }
          }

          private Position position;


          /**
           * Creates a Person with a name and a birthdate.
           */
          public Person(String name, String birthDate){
              this.name = name;
              this.birthDate = LocalDate.parse(birthDate);
          }

          public int getAge(){
              return -1*Period.between(LocalDate.now(),this.birthDate).getYears();
          }

          public void setPosition(String name, double salary){
              this.position = new Position(name,salary);
          }

          public Position getPosition(){
              return this.position;
          }

          public String toString(){
              return name+" - "+getAge()+":"+this.position;
          }
      }
  text: |-
    /* TODO */
    Copy the Person class from Task 2 here. Copy->Paste
  learner_created: false
- name: src/Resume.java
  visible: true
  placeholders:
  - offset: 0
    length: 73
    placeholder_text: |-
      /* TODO */
      The imports will self populate. You don't have to do anything.
    initial_state:
      length: 73
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      import java.util.ArrayList;
      import java.util.Comparator;
      import java.util.List;
      import java.util.PriorityQueue;
  - offset: 97
    length: 92
    placeholder_text: |-
      /* TODO */
      Copy the two inner classes of Resume exactly as they were in Task 2. Copy->paste.
    initial_state:
      length: 92
      offset: 97
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2
          public class Education{
              String school;
              String major;
              public String getSchool(){return school;}
              public String getMajor(){return major;}
              public Education(String school, String major){
                  this.school=school;
                  this.major=major;
              }
              public String toString(){
                  return major+" at "+school;
              }
          }

          public static class Experience{
              int fromYear;
              int toYear;
              String title;
              public Experience(String title, int from, int to){
                  this.title = title;
                  this.fromYear = from;
                  this.toYear = to;
              }
              public String toString(){
                  return fromYear+" - "+toYear+":"+title;
              }
          }
  - offset: 190
    length: 73
    placeholder_text: |-
      /* TODO */
      Create a member variable of type Person (exactly as in task 2)
    initial_state:
      length: 73
      offset: 190
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '    private Person p;'
  - offset: 264
    length: 80
    placeholder_text: |-
      /* TODO */
      Create a List to hold values of type Education (exactly as in task 2)
    initial_state:
      length: 80
      offset: 264
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '    private List<Education> ed;'
  - offset: 345
    length: 72
    placeholder_text: |-
      /* TODO */
      Create a Priority Queue that holds values of type Experience.
    initial_state:
      length: 72
      offset: 345
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '    private PriorityQueue<Experience> ex;'
  - offset: 447
    length: 49
    placeholder_text: |-
      /* TODO */
      Assign a value to the Person variable.
    initial_state:
      length: 49
      offset: 447
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '        this.p = p;'
  - offset: 497
    length: 54
    placeholder_text: |-
      /* TODO */
      Initialize the List with Education objects.
    initial_state:
      length: 54
      offset: 497
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '        ed = new ArrayList<>();'
  - offset: 552
    length: 131
    placeholder_text: |-
      /* TODO */
      Initialize the priority queue with a comparator defined in an anonymous inner class. Check the specs for the comparator.
    initial_state:
      length: 131
      offset: 552
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
              ex = new PriorityQueue<>(new Comparator<Experience>() {
                  @Override
                  public int compare(Experience experience, Experience t1) {
                      return t1.toYear - experience.toYear;
                  }
              });
  - offset: 691
    length: 103
    placeholder_text: |-
      /* TODO */
      Add a standard getter for the experiences. getExperience. it should return a priority queue.
    initial_state:
      length: 103
      offset: 691
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '    public PriorityQueue getExperience(){return ex;}'
  - offset: 796
    length: 131
    placeholder_text: |-
      /* TODO */
      Implement the addEducation, addExperience and override the toString() methods exactly as you did in task 2 (Copy->Paste)
    initial_state:
      length: 131
      offset: 796
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
          public void addEducation(Education e){
              ed.add(e);
          }

          public void addExperience(Experience e){
              ex.add(e);
          }

          public String toString(){
              String s = p.toString();
              s+="\nExperience";
              for(Experience e : ex)
                  s+="\n"+e;
              s+="\nEducation";
              for(Education e: ed)
                  s+="\n"+e;
              return s;
          }
  text: |
    /* TODO */
    The imports will self populate. You don't have to do anything.

    public class Resume {
    /* TODO */
    Copy the two inner classes of Resume exactly as they were in Task 2. Copy->paste.
    /* TODO */
    Create a member variable of type Person (exactly as in task 2)
    /* TODO */
    Create a List to hold values of type Education (exactly as in task 2)
    /* TODO */
    Create a Priority Queue that holds values of type Experience.
        public Resume(Person p){
    /* TODO */
    Assign a value to the Person variable.
    /* TODO */
    Initialize the List with Education objects.
    /* TODO */
    Initialize the priority queue with a comparator defined in an anonymous inner class. Check the specs for the comparator.
        }

    /* TODO */
    Add a standard getter for the experiences. getExperience. it should return a priority queue.

    /* TODO */
    Implement the addEducation, addExperience and override the toString() methods exactly as you did in task 2 (Copy->Paste)



    }
  learner_created: false
status: Unchecked
record: -1

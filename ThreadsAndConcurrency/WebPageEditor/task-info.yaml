type: edu
files:
- name: src/Task.java
  visible: true
  text: |-
    public class Task {
        public static void main(String[] args){
            WebPageEditor wpe = new WebPageEditor("index.html");
            System.out.println("Write whatever you want. Type quit to finish.");
            System.out.println("Whatever you have entered so far will be saved periodically");
            System.out.println("To add a title, prefix the line with t:  (e.g. t:Chapter 1 )");
            System.out.println("You can always view the formatted text by clicking on index.html in the root directory of this project.");
            wpe.start();
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Rule;
    import org.junit.Test;
    import org.junit.contrib.java.lang.system.TextFromStandardInputStream;

    import java.io.ByteArrayInputStream;
    import java.io.File;
    import java.util.LinkedList;

    public class Tests {
      @Rule
      public TextFromStandardInputStream txt = TextFromStandardInputStream.emptyStandardInputStream();

      @Test
      public void testWebPage() {
        WebPage wp = new WebPage();
        Assert.assertTrue("Is your dom a LinkedList?",wp.dom instanceof LinkedList);
        wp.addTitle("T1");
        Assert.assertTrue("Is your title adding the right tags in the right place, with no spaces?",wp.dom.get(0).equalsIgnoreCase("<h1>t1</h1>"));
        wp.addParagraph("p1");
        Assert.assertTrue("Are you adding new elements (paragraps and titles as new elements in the dom?",wp.dom.size()==2);
        Assert.assertTrue("Is your addParagraph adding the right tags next to the text (no spaces)?",wp.dom.get(1).equalsIgnoreCase("<p>p1</p>"));
        Assert.assertTrue("Is your toString flattening the dom into one big string?",wp.toString().contains("T1") && wp.toString().contains("p1") && wp.toString().contains("body"));
        wp.save("deleteme.html");
        File f = new File("deleteme.html");
        Assert.assertTrue("Are you saving to a file with an arbitrary given name?",f.exists());
      }

      @Test
      public void testWebPageEditor(){
        WebPageEditor wpe = new WebPageEditor("first.html");
        txt.provideLines("t:t1","first para","second para");
        Thread t = new Thread(wpe::start);
        t.start();
        Assert.assertTrue("Are you spanning at least two threads?",4<Thread.activeCount());
        try {
          t.sleep(11000L);
          txt.provideLines("quit");
          System.out.println(wpe);
        }catch(Exception e){
          Assert.fail("Something is wrong with the threads:"+e.getMessage());
        }


      }


    }
  learner_created: false
- name: src/WebPage.java
  visible: true
  text: |
    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.util.LinkedList;
    import java.util.List;

    public class WebPage {
        public List<String> dom; // this actually has the html document model.

        public WebPage(){
            dom = new LinkedList<String>();
        }

        public void addTitle(String title){
            dom.add("<h1>"+title+"</h1>");
        }

        public void addParagraph(String paragraph){
            dom.add("<p>"+paragraph+"</p>");
        }

        public String toString(){
            String html = "<html>\n<head>\n</head>\n<body>";
            for(String e:dom){
                html=html+e+"\n";
            }
            return html+"</body>\n</html>";
        }

        public void save(String filename){
            try(FileWriter out = new FileWriter(new File(filename))){
                out.write(this.toString());
            }catch(IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: false
- name: src/WebPageEditor.java
  visible: true
  text: |
    import java.util.Scanner;
    import java.util.concurrent.Executors;
    import java.util.concurrent.ScheduledExecutorService;
    import java.util.concurrent.TimeUnit;

    public class WebPageEditor {
        public  String temp; // holds the last webpage saved.
        public  WebPage wp; // the webpage you are working on
        public  String filename; // the filename to save this webpage

        public WebPageEditor(String filename){
            this.wp = new WebPage();
            this.filename = filename;
        }

        public void start(){

            ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
            service.scheduleAtFixedRate(()->{
                if (checkSave())
                    System.out.println("...Saved");
            },10L,10L, TimeUnit.SECONDS);

            // use a scanner to read every line the user writes
            Scanner kbd  = new Scanner(System.in);
            boolean finish = false;
            while(!finish){
                String text = kbd.nextLine();
                if(text.equals("quit"))
                    finish=true;
                else if (text.startsWith("t:"))
                    wp.addTitle(text.substring(2));
                else
                    wp.addParagraph(text);
            }
            service.shutdownNow(); // when the loop finishes, threads are stopped
        }

        public  boolean checkSave(){
            if(this.wp.toString().equals(this.temp))
                return false;
            else{
                wp.save(filename);
                temp = wp.toString();
                return true;
            }
        }
    }
  learner_created: false
status: Unchecked
record: -1
